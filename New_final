import numpy as np
import pandas as pd
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.metrics.pairwise import cosine_similarity
from scipy.sparse import coo_matrix
from implicit.als import AlternatingLeastSquares


# ===============================
# COLLABORATIVE FILTERING
# ===============================
def build_collaborative_model(df):
    df_repeat = df.loc[df['visitFlag'].eq('repeat'), ['customerId', 'skuCode', 'skuQuantity']]
    df_repeat = df_repeat[df_repeat['skuQuantity'].fillna(0) > 0]

    # Encode
    user_encoder = LabelEncoder()
    item_encoder = LabelEncoder()
    df_repeat.loc[:, 'uid'] = user_encoder.fit_transform(df_repeat['customerId'])
    df_repeat.loc[:, 'iid'] = item_encoder.fit_transform(df_repeat['skuCode'])

    # Sparse matrix
    user_ids = df_repeat['uid'].astype(np.int32).to_numpy()
    item_ids = df_repeat['iid'].astype(np.int32).to_numpy()
    interactions = df_repeat['skuQuantity'].astype(np.float32).to_numpy()

    n_users = df_repeat['uid'].nunique()
    n_items = df_repeat['iid'].nunique()

    user_item = coo_matrix(
        (interactions, (user_ids, item_ids)),
        shape=(n_users, n_items),
        dtype=np.float32
    ).tocsr()

    # Train ALS
    model = AlternatingLeastSquares(
        factors=50,
        regularization=0.01,
        iterations=20,
        use_gpu=False
    )
    model.fit(user_item)

    return model, user_encoder, item_encoder, user_item


def recommend_collaborative(model, user_encoder, item_encoder, user_item, customer_id, N=5):
    if customer_id not in user_encoder.classes_:
        return None
    user_idx = user_encoder.transform([customer_id])[0]
    recs = model.recommend(user_idx, user_item[user_idx], N=N, filter_already_liked_items=True)
    item_indices = [i for i, _ in recs]
    sku_codes = item_encoder.inverse_transform(item_indices)
    return pd.DataFrame({'skuCode': sku_codes})


# ===============================
# CONTENT-BASED FILTERING
# ===============================
def build_item_matrix(df):
    df_items = df.drop_duplicates('skuCode')[['skuCode', 'materialGroupName', 'subCategoryName', 'categoryName']].fillna("")
    column_transformer = ColumnTransformer([
        ('mat', OneHotEncoder(sparse_output=False), ['materialGroupName']),
        ('sub', OneHotEncoder(sparse_output=False), ['subCategoryName']),
        ('cat', OneHotEncoder(sparse_output=False), ['categoryName'])
    ], remainder='drop')
    features = column_transformer.fit_transform(df_items)
    return df_items.reset_index(drop=True), features


def build_customer_profiles(df_first_visit, sku_feature_map):
    profiles = {}
    for cid, group in df_first_visit.groupby('customerId'):
        sku_codes = group['skuCode'].unique()
        vectors = [sku_feature_map[sku] for sku in sku_codes if sku in sku_feature_map]
        if vectors:
            profiles[cid] = np.mean(vectors, axis=0)
    return profiles


def recommend_content_based(customer_id, customer_profiles, df_items, sku_feature_map, top_n=5):
    if customer_id not in customer_profiles:
        return None
    customer_vector = customer_profiles[customer_id]
    all_skus = df_items['skuCode'].values
    all_vectors = np.array([sku_feature_map[sku] for sku in all_skus])
    similarities = cosine_similarity([customer_vector], all_vectors).flatten()

    top_indices = similarities.argsort()[-top_n:][::-1]
    return pd.DataFrame({
        'skuCode': all_skus[top_indices],
        'similarity': similarities[top_indices]
    })


# ===============================
# POPULARITY-BASED FILTERING
# ===============================
def get_popular(df, top_n=5):
    popular = (
        df.groupby('skuCode')['skuQuantity']
        .sum()
        .sort_values(ascending=False)
        .head(top_n)
        .reset_index()
    )
    return popular


# ===============================
# UNIFIED RECOMMENDER
# ===============================
def unified_recommendation(df, customer_id, top_n=5):
    # Collaborative setup
    model, user_encoder, item_encoder, user_item = build_collaborative_model(df)

    # Content-based setup
    df_first_visit = df[df['visitFlag'] == 'first_visit']
    df_items, features = build_item_matrix(df)
    sku_feature_map = dict(zip(df_items['skuCode'], features))
    customer_profiles = build_customer_profiles(df_first_visit, sku_feature_map)

    # CASE 1: Repeat â†’ Collaborative
    if (customer_id in df['customerId'].values) and \
       (df[df['customerId'] == customer_id]['visitFlag'].iloc[0] == 'repeat'):
        print("ðŸ”¹ Using Collaborative Filtering")
        return recommend_collaborative(model, user_encoder, item_encoder, user_item, customer_id, N=top_n)

    # CASE 2: First visit â†’ Content-based
    elif (customer_id in df['customerId'].values) and \
         (df[df['customerId'] == customer_id]['visitFlag'].iloc[0] == 'first_visit'):
        print("ðŸ”¹ Using Content-Based Filtering")
        return recommend_content_based(customer_id, customer_profiles, df_items, sku_feature_map, top_n=top_n)

    # CASE 3: Not in dataset â†’ Popularity
    else:
        print("ðŸ”¹ Using Popularity-Based Filtering")
        return get_popular(df, top_n=top_n)
