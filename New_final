from pyspark.sql import SparkSession, functions as F

spark = SparkSession.builder.getOrCreate()

# Load all tables
als_brand_recos_table = spark.table("cdp.product_reccomendation.als_brand_recos_table")
brand_popularity_table = spark.table("cdp.product_reccomendation.brand_popularity_table")
subcategory_popularity_table = spark.table("cdp.product_reccomendation.subcategory_popularity_table")
overall_popularity_table = spark.table("cdp.product_reccomendation.overall_popularity_table")
df_category = spark.table("cdp.product_reccomendation.category_filtered")

def get_user_recommendations(user_id, current_sku, n=5):
    # ---------------------- Step 1️⃣ — Find brand & subcategory ----------------------
    sku_data = (
        df_category.filter(F.col("skuCode") == current_sku)
        .select("brandName", "subCategoryName")
        .first()
    )
    if not sku_data:
        return f"SKU {current_sku} not found in df_category."

    brandName = sku_data["brandName"]
    subCategoryName = sku_data["subCategoryName"]

    # ---------------------- Step 2️⃣ — Check ALS presence ----------------------
    user_exists = als_brand_recos_table.filter(F.col("user_id") == user_id).limit(1).count() > 0

    # Helper to random sample only small filtered sets
    def pick_random(df, n):
        total = df.count()
        if total <= n:
            return df
        # Spark’s sample fraction only applies approx, but OK for small data
        fraction = min(1.0, n / total * 1.2)
        sampled = df.sample(False, fraction, seed=42).limit(n)
        return sampled

    # ---------------------- Step 3️⃣ — ALS users ----------------------
    if user_exists:
        # 1️⃣ Brand-level ALS
        df1 = als_brand_recos_table.filter(
            (F.col("user_id") == user_id) &
            (F.col("brandName") == brandName)
        ).select("skuCode", "brandName", "subCategoryName", "als_score")

        if df1.count() >= n:
            final_recos = pick_random(df1, n)
        else:
            # 2️⃣ Subcategory-level ALS
            df2 = als_brand_recos_table.filter(
                (F.col("user_id") == user_id) &
                (F.col("subCategoryName") == subCategoryName)
            ).select("skuCode", "brandName", "subCategoryName", "als_score")

            combined = df1.union(df2).dropDuplicates(["skuCode"])
            if combined.count() >= n:
                final_recos = pick_random(combined, n)
            else:
                # 3️⃣ Brand popularity
                df3 = brand_popularity_table.filter(
                    F.col("brandName") == brandName
                ).select("skuCode", "brandName", "subCategoryName")

                combined = combined.union(df3).dropDuplicates(["skuCode"])
                if combined.count() >= n:
                    final_recos = pick_random(combined, n)
                else:
                    # 4️⃣ Overall popularity
                    df4 = overall_popularity_table.select(
                        "skuCode", "brandName", "subCategoryName"
                    )
                    final_recos = combined.union(df4).dropDuplicates(["skuCode"]).limit(n)

        final_recos = final_recos.withColumn("user_id", F.lit(user_id))
        final_recos = final_recos.withColumn("source", F.lit("ALS Hierarchy: Brand → Subcat → Pop"))
        return final_recos.limit(n)

    # ---------------------- Step 4️⃣ — Cold start users ----------------------
    else:
        df1 = brand_popularity_table.filter(
            F.col("brandName") == brandName
        ).select("skuCode", "brandName", "subCategoryName")

        if df1.count() >= n:
            final_recos = pick_random(df1, n)
        else:
            df2 = subcategory_popularity_table.filter(
                F.col("subCategoryName") == subCategoryName
            ).select("skuCode", "brandName", "subCategoryName")

            combined = df1.union(df2).dropDuplicates(["skuCode"])
            if combined.count() >= n:
                final_recos = pick_random(combined, n)
            else:
                df3 = overall_popularity_table.select("skuCode", "brandName", "subCategoryName")
                final_recos = combined.union(df3).dropDuplicates(["skuCode"]).limit(n)

        final_recos = final_recos.withColumn("user_id", F.lit(user_id))
        final_recos = final_recos.withColumn("source", F.lit("Cold Start: Brand → Subcat → Pop"))
        return final_recos.limit(n)
