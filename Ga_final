from pyspark.sql import functions as F, Window

# 1️⃣ Brand-wise ALS top 10 per user
als_brand_recos = (
    als_predictions  # columns: user_id, sku_code, brand_name, subcategory_name, rating
    .withColumn(
        "rank",
        F.row_number().over(Window.partitionBy("user_id", "brand_name").orderBy(F.desc("rating")))
    )
    .filter(F.col("rank") <= 10)
)

als_brand_recos.write.mode("overwrite").saveAsTable("als_brand_recos_table")

# 2️⃣ Brand popularity
brand_popularity = (
    df_final.groupBy("brand_name", "sku_code", "subcategory_name")
    .agg(F.count("*").alias("sales_count"))
    .withColumn(
        "rank",
        F.row_number().over(Window.partitionBy("brand_name").orderBy(F.desc("sales_count")))
    )
)
brand_popularity.write.mode("overwrite").saveAsTable("brand_popularity_table")

# 3️⃣ Subcategory popularity
subcategory_popularity = (
    df_final.groupBy("subcategory_name", "sku_code", "brand_name")
    .agg(F.count("*").alias("sales_count"))
    .withColumn(
        "rank",
        F.row_number().over(Window.partitionBy("subcategory_name").orderBy(F.desc("sales_count")))
    )
)
subcategory_popularity.write.mode("overwrite").saveAsTable("subcategory_popularity_table")

# 4️⃣ Overall popularity
overall_popularity = (
    df_final.groupBy("sku_code", "brand_name", "subcategory_name")
    .agg(F.count("*").alias("sales_count"))
    .orderBy(F.desc("sales_count"))
)
overall_popularity.write.mode("overwrite").saveAsTable("overall_popularity_table")









from pyspark.sql import SparkSession, functions as F

spark = SparkSession.builder.getOrCreate()

# =====================================================
# Load all prepared tables
# =====================================================
als_brand_recos_table = spark.table("cdp.product_reccomendation.als_brand_recos_table")
brand_popularity_table = spark.table("cdp.product_reccomendation.brand_popularity_table")
subcategory_popularity_table = spark.table("cdp.product_reccomendation.subcategory_popularity_table")
overall_popularity_table = spark.table("cdp.product_reccomendation.overall_popularity_table")

# =====================================================
# Recommendation Function
# =====================================================
def get_user_recommendations(user_id, current_sku):
    # Step 1️⃣ — Check if SKU present in df_category
    sku_data = (
        df_category.filter(F.col("skuCode") == current_sku)
        .select("brandName", "subCategoryName")
        .first()
    )
    if not sku_data:
        return f"SKU {current_sku} not found in df_category."

    brandName = sku_data["brandName"]
    subCategoryName = sku_data["subCategoryName"]

    # Step 2️⃣ — Check if user exists in ALS table
    user_exists = (
        als_brand_recos_table.filter(F.col("user_id") == user_id).limit(1).count() > 0
    )

    # Helper: keep recos unique and limited to 5
    def merge_recos(base_df, add_df, n_needed):
        return (
            base_df.union(add_df)
            .dropDuplicates(["skuCode"])
            .limit(5)
        )

    # =====================================================
    # Step 3️⃣ — ALS Flow
    # =====================================================
    if user_exists:
        # a) Brand-based ALS recommendations
        als_brand_recos = (
            als_brand_recos_table
            .filter(
                (F.col("user_id") == user_id) &
                (F.col("brandName") == brandName)
            )
            .orderBy(F.desc("als_score"))
            .select("skuCode", "brandName", "subCategoryName")
        )

        final_recos = als_brand_recos.limit(5)
        count_als = final_recos.count()
        remaining = 5 - count_als

        # b) Backfill from ALS subcategory (same user, same subcategory)
        if remaining > 0:
            als_subcat_recos = (
                als_brand_recos_table
                .filter(
                    (F.col("user_id") == user_id) &
                    (F.col("subCategoryName") == subCategoryName)
                )
                .orderBy(F.desc("als_score"))
                .select("skuCode", "brandName", "subCategoryName")
                .limit(remaining * 2)
            )
            final_recos = merge_recos(final_recos, als_subcat_recos, remaining)
            remaining = 5 - final_recos.count()

        # c) Backfill from brand popularity
        if remaining > 0:
            brand_pop = (
                brand_popularity_table
                .filter(F.col("brandName") == brandName)
                .select("skuCode", "brandName", "subCategoryName")
                .limit(remaining * 2)
            )
            final_recos = merge_recos(final_recos, brand_pop, remaining)
            remaining = 5 - final_recos.count()

        # d) Backfill from overall popularity
        if remaining > 0:
            final_recos = merge_recos(
                final_recos,
                overall_popularity_table.select("skuCode", "brandName", "subCategoryName"),
                remaining
            )

        # Add user_id and source
        final_recos = (
            final_recos
            .withColumn("user_id", F.lit(user_id))
            .withColumn("source", F.lit("ALS Hierarchy: Brand → Subcat → Pop"))
        )
        return final_recos.limit(5)

    # =====================================================
    # Step 4️⃣ — Cold Start User (no ALS history)
    # =====================================================
    else:
        brand_recos = (
            brand_popularity_table
            .filter(F.col("brandName") == brandName)
            .select("skuCode", "brandName", "subCategoryName")
        )
        final_recos = brand_recos.limit(5)
        remaining = 5 - final_recos.count()

        if remaining > 0:
            sub_pop = (
                subcategory_popularity_table
                .filter(F.col("subCategoryName") == subCategoryName)
                .select("skuCode", "brandName", "subCategoryName")
                .limit(remaining * 2)
            )
            final_recos = merge_recos(final_recos, sub_pop, remaining)
            remaining = 5 - final_recos.count()

        if remaining > 0:
            final_recos = merge_recos(
                final_recos,
                overall_popularity_table.select("skuCode", "brandName", "subCategoryName"),
                remaining
            )

        final_recos = (
            final_recos
            .withColumn("user_id", F.lit(user_id))
            .withColumn("source", F.lit("Cold Start: Brand → Subcat → Pop"))
        )
        return final_recos.limit(5)

